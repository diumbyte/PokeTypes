{"version":3,"sources":["components/Header/Header.js","components/AutosuggestInput/AutosuggestInput.js","utils/stringHelpers.js","components/TypeSelection/TypeSelection.js","utils/displayHelpers.js","components/TypeResult/TypeResult.js","components/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","AutosuggestInput","props","onAutocompleteChange","e","newValue","method","onInputChange","getSuggestions","value","keys","inputLength","trim","length","optionsList","fuseOpts","threshold","results","Fuse","search","map","sugg","item","getSuggestionValue","suggestion","suggestionProp","renderSuggestion","onSuggestionsFetchRequested","setState","suggestions","onSuggestionsClearRequested","state","this","id","type","onSuggestionSelected","inputProps","placeholder","autocomplete","autocorrect","autocapitalize","spellcheck","onChange","shouldRenderSuggestions","Component","capitalizeString","str","charAt","toUpperCase","slice","TypeSelection","basePokeAPI","inputValue","componentDidMount","a","axios","get","pokemonResList","data","pokemon","pokemonList","name","url","onTypeSelectionChange","segments","split","lastSegment","pop","typeToHex","bug","dark","dragon","electric","fairy","fighting","fire","flying","ghost","grass","ground","ice","normal","poison","psychic","rock","steel","water","TypeResult","pokeId","children","style","backgroundColor","src","process","alt","Main","types","pokeTypesList","reduce","acc","curr","Object","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ea8e0c0.chunk.js","sourcesContent":["import './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"main-header\">\r\n            <h2 className=\"main-header-title\">PokeTypes</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Autosuggest from 'react-autosuggest';\r\nimport Fuse from 'fuse.js';\r\nimport './AutosuggestInput.css';\r\n\r\nclass AutosuggestInput extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            suggestions: []\r\n        };\r\n    }\r\n\r\n    //**** Autosuggest boilerplate **** //\r\n    onAutocompleteChange = (e, { newValue, method }) => {\r\n        const { onInputChange } = this.props;\r\n\r\n        onInputChange(newValue);\r\n    }\r\n\r\n    getSuggestions = (value) => {\r\n        const { keys } = this.props;\r\n        const inputLength = value.trim().length;\r\n\r\n        const { optionsList } = this.props;\r\n        const fuseOpts = {\r\n            threshold: 0.3,\r\n            keys\r\n        }\r\n\r\n        const fuse = new Fuse(optionsList, fuseOpts);\r\n        const results = fuse.search(value.trim()).map(sugg => sugg.item);\r\n\r\n        return inputLength === 0\r\n            ? optionsList\r\n            : results;\r\n    }\r\n\r\n    getSuggestionValue = suggestion => {\r\n        return suggestion[this.props.suggestionProp];\r\n    }\r\n\r\n    renderSuggestion = suggestion => (\r\n        <div>\r\n            {suggestion[this.props.suggestionProp]}\r\n        </div>\r\n    )\r\n\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n            suggestions: this.getSuggestions(value)\r\n        })\r\n    }\r\n\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        })\r\n    }\r\n\r\n    shouldRenderSuggestions() {\r\n        return true;\r\n    } \r\n\r\n\r\n    render() {\r\n        const { suggestions } = this.state;\r\n        const {\r\n            value,\r\n            id,\r\n            type,\r\n            onSuggestionSelected\r\n        } = this.props;\r\n\r\n        const inputProps = {\r\n            placeholder: `Search ${type} types`,\r\n            value,\r\n            autocomplete: false,\r\n            autocorrect: false,\r\n            autocapitalize: false,\r\n            spellcheck: false,\r\n            onChange: this.onAutocompleteChange\r\n        }\r\n        \r\n        return (\r\n            <Autosuggest\r\n                id={id}\r\n                suggestions={suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={this.getSuggestionValue}\r\n                renderSuggestion={this.renderSuggestion}\r\n                inputProps={inputProps} \r\n                onSuggestionSelected={onSuggestionSelected}\r\n                shouldRenderSuggestions={this.shouldRenderSuggestions}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nAutosuggestInput.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onInputChange: PropTypes.func.isRequired,\r\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    optionsList: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    suggestionProp: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default AutosuggestInput;","export const capitalizeString = (str) => str.charAt(0).toUpperCase() + str.slice(1);","import { Component } from 'react';\r\nimport AutosuggestInput from '../AutosuggestInput/AutosuggestInput';\r\nimport axios from 'axios';\r\nimport { capitalizeString } from '../../utils/stringHelpers'\r\nimport './TypeSelection.css'\r\n\r\nexport default class TypeSelection extends Component {\r\n    basePokeAPI = \"https://pokeapi.co/api/v2\";\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            pokemonList: [],\r\n            inputValue: ''\r\n        };\r\n    }\r\n\r\n    // Function signature like this to easily pass to Autosuggestion component\r\n    onInputChange = (newValue) => {\r\n        this.setState({\r\n            inputValue: newValue\r\n        })\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const { type } = this.props;\r\n        const { data: {pokemon: pokemonResList} } = await axios.get(`${this.basePokeAPI}/type/${type}`);\r\n        // API response looks like:\r\n            // pokemon: { name: \"\", url: \"API Url to specific pokemon\"}\r\n        const pokemonList = pokemonResList.map(item => (\r\n            {\r\n                name: capitalizeString(item.pokemon.name),\r\n                url: item.pokemon.url\r\n            }\r\n        ))\r\n\r\n        this.setState({\r\n            pokemonList\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { inputValue, pokemonList } = this.state;\r\n        const { type, onTypeSelectionChange } = this.props;\r\n\r\n        return (\r\n            <AutosuggestInput \r\n                value={inputValue}\r\n                id={type}\r\n                type={type}\r\n                onInputChange={this.onInputChange}\r\n                optionsList={pokemonList}\r\n                keys={[\"name\"]}\r\n                suggestionProp={\"name\"}\r\n                onSuggestionSelected={(e, {suggestion}) => {\r\n                    // Example suggestion.url = https://pokeapi.co/api/v2/pokemon/10/\r\n                    // Want the last URL segment\r\n                    const segments = suggestion.url.split('/');\r\n                    // If there's a trailing slash pop() will return an empty string \"\" = false\r\n                    // Short circuit fails so pop is executed again only if there's a trailing slash\r\n                    const lastSegment = segments.pop() || segments.pop(); \r\n\r\n                    onTypeSelectionChange({id: lastSegment, name: suggestion.name})\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}","export const pokeIdToSpriteURL = (id) => `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`\r\n\r\nexport const typeToHex = (type) => {\r\n    const colors = {\r\n        bug: \"#93BB3A\",\r\n        dark: \"#595761\",\r\n        dragon: \"#176CC5\",\r\n        electric: \"#F1D85A\",\r\n        fairy: \"#F1D85A\",\r\n        fighting: \"#D14461\",\r\n        fire: \"#F9A555\",\r\n        flying: \"#A2BCEA\",\r\n        ghost: \"#A2BCEA\",\r\n        grass: \"#63BC5D\",\r\n        ground: \"#D87C52\",\r\n        ice: \"#D87C52\",\r\n        normal: \"#A0A29F\",\r\n        poison: \"#B667CD\",\r\n        psychic: \"#F88684\",\r\n        rock: \"#C9BB8D\",\r\n        steel: \"#5995A2\",\r\n        water: \"#579EDD\",\r\n    }\r\n\r\n    return colors[type];\r\n}","import { pokeIdToSpriteURL, typeToHex } from '../../utils/displayHelpers';\r\nimport { capitalizeString } from '../../utils/stringHelpers';\r\nimport './TypeResult.css';\r\n\r\nconst TypeResult = ({type, pokeId, children}) => {\r\n    return(\r\n        <div className=\"result-card\">\r\n            <div className=\"result-card___header\" style={{backgroundColor: typeToHex(type)}}>\r\n                <img className=\"result-card___type-icon\" \r\n                    src={`${process.env.PUBLIC_URL}/assets/${type}.svg`}\r\n                    alt=\"Pokemon type icon\"\r\n                />\r\n                <span className=\"result-card___type\">{`${capitalizeString(type)}`}</span>\r\n                <span className=\"result-card___name\">\r\n                    {children}    \r\n                </span>\r\n            </div>\r\n            <div className=\"result-card___body\">\r\n            {   pokeId.length === 0\r\n                ? <></>\r\n                : <img src={ pokeIdToSpriteURL(pokeId)} alt=\"Pokemon icon\"/>\r\n            }\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TypeResult;","import { Component } from 'react';\r\nimport TypeSelection from '../TypeSelection/TypeSelection';\r\nimport TypeResult from '../TypeResult/TypeResult';\r\nimport './Main.css'\r\n\r\nexport default class Main extends Component {\r\n\r\n    types = [\"bug\", \"dark\", \"dragon\", \r\n            \"electric\", \"fairy\", \"fighting\", \r\n            \"fire\", \"flying\", \"ghost\",\r\n            \"grass\", \"ground\", \"ice\", \r\n            \"normal\", \"poison\", \"psychic\",\r\n            \"rock\", \"steel\", \"water\"];\r\n\r\n    // types = [\"bug\", \"dark\", \"dragon\"]\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // Reduce array to object with properties of each type\r\n        /*\r\n        {\r\n            bug: \"pokemonName\"\r\n        }\r\n        */\r\n        const pokeTypesList = this.types.reduce( (acc, curr) => \r\n                            {\r\n                                acc[curr] = {\r\n                                    id: '',\r\n                                    name: ''\r\n                                }\r\n                                return acc;\r\n                            }\r\n                            , {});\r\n        \r\n        this.state = pokeTypesList;\r\n    }\r\n\r\n    onTypeSelectionChange = (type) => ({id, name}) => {\r\n        this.setState({\r\n            [type]: {\r\n                id,\r\n                name\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container  main-container\">\r\n                <div className=\"grid-container results-container\">\r\n                    { Object.keys(this.state).map(type => (\r\n                        <TypeResult \r\n                            key={type}\r\n                            type={type}\r\n                            pokeId={this.state[type].id}\r\n                        >\r\n                            <TypeSelection \r\n                                key={type}\r\n                                type={type}\r\n                                onTypeSelectionChange={this.onTypeSelectionChange(type)}\r\n                            />\r\n                        </TypeResult>\r\n                    ) )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import './App.css';\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}